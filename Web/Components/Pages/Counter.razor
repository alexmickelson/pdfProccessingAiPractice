@page "/counter"
@using Azure;
@using Azure.AI.OpenAI
@using Microsoft.Extensions.AI
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<textarea @bind="UserInput" placeholder="Ask something..." rows="4" cols="60"></textarea>
<br />
<button @onclick="SendMessage">Send</button>


@foreach(var c in chatHistory)
{
    <div class="chat-message">
        @c.Role @c.Text
    </div>
}

@if (response?.NotableAttributes != null && response.NotableAttributes.Any())
{
    <div class="card m-3">
        <h3>Notable Attributes:</h3>
        <ul>
            @foreach (var a in response.NotableAttributes)
            {
                <li><strong>@a.Key:</strong> @a.Value</li>
            }
        </ul>
    </div>
}
@code {
    private string UserInput = "";
    List<ChatMessage> chatHistory = [
        new ChatMessage(ChatRole.System, @"
            You help people read documents to fill out forms
        ")
    ];

    private DocumentResponse? response;

    private async Task SendMessage()
    {
        var azureOpenAiKey = Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY") ?? throw new Exception("AZURE_OPENAI_KEY is not set");
        var azureOpenAiUrl= Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new Exception("AZURE_OPENAI_ENDPOINT is not set");
        var model = "o4-mini-alex-faculty-dev";

        var azureClient = new AzureOpenAIClient(
            new Uri(azureOpenAiUrl),
            new AzureKeyCredential(azureOpenAiKey),
            new AzureOpenAIClientOptions(version: Azure.AI.OpenAI.AzureOpenAIClientOptions.ServiceVersion.V2025_01_01_Preview));
        IChatClient chatClient = azureClient
            .GetChatClient(deploymentName: model)
            .AsIChatClient();

        var newMessage = new ChatMessage(ChatRole.User, UserInput);
        chatHistory.Add(newMessage);

        response = (await chatClient.GetResponseAsync<DocumentResponse>(chatHistory)).Result;

        chatHistory.Add(new ChatMessage(ChatRole.Assistant, response.Message));
        await InvokeAsync(StateHasChanged);
    }

    public record DocumentResponse(string Message, Dictionary<string, string> NotableAttributes);
}