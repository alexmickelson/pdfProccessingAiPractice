@page "/counter"
@using Azure;
@using Azure.AI.OpenAI
@using OpenAI.Chat
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<textarea @bind="UserInput" placeholder="Ask something..." rows="4" cols="60"></textarea>
<br />
<button @onclick="SendMessage">Send</button>


@foreach(var c in chatHistory)
{
    <div class="chat-message">
        @foreach (var content in c.Content)
        {
            <p>@content.Text</p>
        }
    </div>
}
@if(response != null)
{
    @foreach(var c in response.Content)
    {
        <div class="chat-message">
            @c.Text
        </div>
    }
}
@code {
    private string UserInput = "";
    List<ChatMessage> chatHistory = [
        new SystemChatMessage(@"""
            You help people read documents to fill out forms
        """)
    ];

    private ChatCompletion? response;

    private async Task SendMessage()
    {
        var azureOpenAiKey = Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY") ?? throw new Exception("AZURE_OPENAI_KEY is not set");
        var azureOpenAiUrl= Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new Exception("AZURE_OPENAI_ENDPOINT is not set");
        var model = "o4-mini-alex-faculty-dev";

        AzureOpenAIClient azureClient = new(
            new Uri(azureOpenAiUrl),
            new AzureKeyCredential(azureOpenAiKey));
        var chatClient = azureClient.GetChatClient(model);

        var newMessage = new UserChatMessage(UserInput);
        chatHistory.Add(newMessage);

        response = await chatClient.CompleteChatAsync(chatHistory);

        chatHistory.Add(new AssistantChatMessage(response.Content[0].Text));
        await InvokeAsync(StateHasChanged);
    }
}