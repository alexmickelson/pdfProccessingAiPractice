@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<div @onwheel="OnWheel"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     style="width: 100%; height: 100%; cursor: @(isDragging ? "grabbing" : "grab"); overflow: hidden; position: relative;">
    <div style="position: relative; width: 100%; height: 100%;
                transform: scale(@zoom) translate(@(offsetX)px, @(offsetY)px);
                transition: transform 0.1s;">
        @ChildContent
    </div>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private double zoom = 1.0;
    private double offsetX = 0.0;
    private double offsetY = 0.0;
    private bool isDragging = false;
    private double lastMouseX, lastMouseY;

    private void OnWheel(WheelEventArgs e)
    {
        zoom += e.DeltaY < 0 ? 0.1 : -0.1;
        zoom = Math.Clamp(zoom, 0.2, 5.0);
        StateHasChanged();
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        isDragging = true;
        lastMouseX = e.ClientX;
        lastMouseY = e.ClientY;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (isDragging)
        {
            var dx = e.ClientX - lastMouseX;
            var dy = e.ClientY - lastMouseY;
            offsetX += dx;
            offsetY += dy;
            lastMouseX = e.ClientX;
            lastMouseY = e.ClientY;
            StateHasChanged();
        }
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        isDragging = false;
    }
}