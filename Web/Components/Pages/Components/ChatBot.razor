@using System.Net.Http.Json
@using Azure.AI.DocumentIntelligence
@using Azure;
@using Azure.AI.OpenAI
@using OpenAI.Chat
@rendermode InteractiveServer

<div>  
  <div>
    <label for="userInput">Your Message:</label>
    <input id="userInput" @bind="UserMessage" @bind:event="oninput" />
    <button @onclick="SendMessage">Send</button>
  </div>
  <div>
    <h4>Chat History:</h4>
    @foreach(var c in chatHistory)
    {
        <div class="chat-message">
            @foreach (var content in c.Content)
      {
                <p>@content.Text</p>
      }
      </div>
    }
  </div>
</div>

@code {
  [Parameter]
  public AnalyzeResult AiResponse { get; set; } = default!;
  private string UserMessage { get; set; } = string.Empty;
  List<ChatMessage> chatHistory = [];
  private ChatCompletion? response;

  protected override void OnInitialized()
  {
      chatHistory.Add(
      new SystemChatMessage($@"""
<Document>
{AiResponse.Content}
</Document>

You help people read documents to fill out forms
"""));
  }

  private async Task SendMessage()
  {
    var azureOpenAiKey = Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY") ?? throw new Exception("AZURE_OPENAI_KEY is not set");
    var azureOpenAiUrl= Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new Exception("AZURE_OPENAI_ENDPOINT is not set");
    var model = "o4-mini-alex-faculty-dev";

    AzureOpenAIClient azureClient = new(new Uri(azureOpenAiUrl), new AzureKeyCredential(azureOpenAiKey));
    
    var chatClient = azureClient.GetChatClient(model);

    var newMessage = new UserChatMessage(UserMessage);
    chatHistory.Add(newMessage);

    response = await chatClient.CompleteChatAsync(chatHistory);

    chatHistory.Add(new AssistantChatMessage(response.Content[0].Text));
    
    UserMessage = string.Empty;
    await InvokeAsync(StateHasChanged);
  }
}