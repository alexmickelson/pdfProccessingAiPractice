@using System.Net.Http.Json
@using Azure.AI.DocumentIntelligence
@using Azure;
@using Azure.AI.OpenAI
@using OpenAI.Chat
@rendermode InteractiveServer

<div>
  <div>
   @for (int i = 0; i < chatHistory.Count; i++)
   {
      var c = chatHistory[i];
      var messageClass = i % 2 == 0 ? "bg-light border rounded p-2" : "bg-primary-subtle text-end  border rounded p-2";
      <div class="@messageClass m-1">
        @foreach (var content in c.Content)
        {
           <p>@(content.Text.Contains("</Document>")
            ?content.Text.Split("</Document>")[1]
            :content.Text)</p>
        }
      </div>
   }
  </div>
  <form class="mb-3" @onsubmit="HandleSubmit" @onsubmit:preventDefault>
    <br>
    <div class="input-group">
      <input id="userInput" class="form-control" placeholder="Type your message..." @bind="UserMessage" @bind:event="oninput" />
      <button class="btn btn-primary" type="submit" disabled="@isLoading">Send</button>
      @if (isLoading)
      {
        <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
      }
    </div>
  </form>
</div>

@code {
  [Parameter]
  public AnalyzeResult AiResponse { get; set; } = default!;
  private string UserMessage { get; set; } = string.Empty;
  List<ChatMessage> chatHistory = [];
  private ChatCompletion? response;
  private bool isLoading = false;

  protected override void OnInitialized()
  {
      chatHistory.Add(
      new SystemChatMessage($@"
<Document>
{AiResponse.Content}
</Document>

You help people read documents to fill out forms
"));
  }

  private async Task HandleSubmit()
  {
    await SendMessage();
  }

  private async Task SendMessage()
  {
    isLoading = true;
    StateHasChanged();

    var azureOpenAiKey = Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY") ?? throw new Exception("AZURE_OPENAI_KEY is not set");
    var azureOpenAiUrl= Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new Exception("AZURE_OPENAI_ENDPOINT is not set");
    var model = "o4-mini-alex-faculty-dev";

    AzureOpenAIClient azureClient = new(new Uri(azureOpenAiUrl), new AzureKeyCredential(azureOpenAiKey));
    
    var chatClient = azureClient.GetChatClient(model);

    var newMessage = new UserChatMessage(UserMessage);
    chatHistory.Add(newMessage);

    response = await chatClient.CompleteChatAsync(chatHistory);

    chatHistory.Add(new AssistantChatMessage(response.Content[0].Text));
    
    UserMessage = string.Empty;
    isLoading = false;
    await InvokeAsync(StateHasChanged);
  }
}