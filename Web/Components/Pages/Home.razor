@page "/"
@rendermode InteractiveServer
@using System.IO
@using Azure
@using Azure.AI.DocumentIntelligence
@using ImageMagick
@using Web.Components.Pages.Components

<PageTitle>PDF Viewer</PageTitle>

<div class="row">
  <div class="col-6">
    <form class="upload-section" @onsubmit="HandleSubmit" @onsubmit:preventDefault>
      <InputFile OnChange="HandleFileSelected" accept=".pdf" MaxAllowedSize="26214400" />
      <br>
      <button class="btn btn-primary" type="submit">Process</button>
    </form>


    @if (_imageUrls != null && _imageUrls.Any())
    {
      <div class="" style="position: relative;">
        @foreach (var imageUrl in _imageUrls)
        {
          <div style="overflow: hidden; width: 100%; height: 600px; border: 1px solid #ccc; position: relative;">
            <ZoomPanContainer>
              <img src="@imageUrl" style="
                width: @(aiResult?.Pages[0].Width)in;
                height: @(aiResult?.Pages[0].Height)in;
                user-select: none;
                pointer-events: none;
              " />
              @if (aiResult != null)
              {
                @foreach (var paragraph in aiResult.Paragraphs)
                {
                  <ProcessedParagraph Paragraph="paragraph" />
                }
              }
            </ZoomPanContainer>
          </div>
        }
      </div>
    }
  </div>
  <div class="col-6">
    @if (aiResult != null)
    {
      <ChatBot AiResponse="aiResult" />
    }
  </div>
</div>

@code {
  private InputFile? fileInput;
  private IBrowserFile? selectedFile;
  private ElementReference imageRef;
  private AnalyzeResult? aiResult = null;
  private List<string> _imageUrls = new List<string>();

  private async Task HandleSubmit()
  {
    await convertImagesToPng();
    await ProcessWithAzureAi();
  }

  private async Task convertImagesToPng()
  {
    if (selectedFile == null)
    {
      Console.WriteLine("cannot convert, no file selected");
      return;
    }
    var memoryStream = new MemoryStream();
    await selectedFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
    memoryStream.Position = 0;

    _imageUrls = new List<string>();

    using (var images = new MagickImageCollection())
    {
      images.Read(memoryStream, new MagickReadSettings
      {
        Format = MagickFormat.Pdf,
        Density = new Density(300, 300)
      });

      foreach (var image in images)
      {
        var imageStream = new MemoryStream();
        image.Write(imageStream, MagickFormat.Png);
        var base64Data = Convert.ToBase64String(imageStream.ToArray());
        _imageUrls.Add($"data:image/png;base64,{base64Data}");
      }
    }
  }
  private void HandleFileSelected(InputFileChangeEventArgs e)
  {
    selectedFile = e.File;
  }

  private async Task ProcessWithAzureAi()
  {
    if (selectedFile == null)
    {
      Console.WriteLine("cannot process with ai, no file selected");
      return;
    }
    string key = Environment.GetEnvironmentVariable("AZURE_DI_KEY") ?? throw new Exception("AZURE_DI_KEY not set");
    string endpoint = Environment.GetEnvironmentVariable("AZURE_DI_URL") ?? throw new Exception("AZURE_DI_URL not set");
    AzureKeyCredential credential = new AzureKeyCredential(key);
    DocumentIntelligenceClient client = new DocumentIntelligenceClient(new Uri(endpoint), credential);

    var memoryStream = new MemoryStream();
    await selectedFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
    memoryStream.Position = 0;

      Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(
      WaitUntil.Completed,
      "prebuilt-layout",
    BinaryData.FromStream(memoryStream)
      );

    aiResult = operation.Value;
  }
}

<style>
  .upload-section {
    margin: 20px 0;
    display: flex;
    gap: 10px;
    align-items: center;
  }
</style>
